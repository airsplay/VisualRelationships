__author__ = 'tylin'
from tokenizer.ptbtokenizer import PTBTokenizer
from bleu.bleu import Bleu
from meteor.meteor import Meteor
from rouge.rouge import Rouge
from cider.cider import Cider

class COCOEvilCap:
    def __init__(self):
        self.eval = {}
        self.imgToEval = {}

    def evaluate(self, gtscap, rescap, metric=None):
        """

        :param gtscap: The gts of result. Support two types. [[gt1, gt2, ..., gt_n], ...] or [gt1, gt2, ...gt_n]
        :param rescap: The result. should be [res1, res2, ... res_n]
        :param metric: 'BLEU', 'METEOR', 'ROUGE_L', 'CIDEr'
        :return:
        """
        assert len(gtscap) == len(rescap)
        gts = {}
        res = {}
        if type(gtscap[0]) is list:
            cnt = 0
            for i, caps in enumerate(gtscap):
                gts[i] = [{'image_id': i, 'id': cnt + k, 'caption': cap} for k, cap in enumerate(caps)]
                cnt += len(gtscap[i])
        else:
            for i, cap in enumerate(gtscap):
                gts[i] = [{'image_id': i, 'id': i, 'caption': cap}]

        for i, cap in enumerate(rescap):
            res[i] = [{'image_id': i, 'id': i, 'caption': cap}]
        # gts = {}
        # res = {}

        # for imgId in imgIds:
        #     gts[imgId] = self.coco.imgToAnns[imgId]
        #     res[imgId] = self.cocoRes.imgToAnns[imgId]
        # =================================================
        # Set up scorers
        # =================================================
        # print 'tokenization...'
        tokenizer = PTBTokenizer()
        gts  = tokenizer.tokenize(gts)
        res = tokenizer.tokenize(res)

        # =================================================
        # Set up scorers
        # =================================================
        # print 'setting up scorers...'
        metric_dict = {'BLEU': (Bleu(4), ["Bleu_1", "Bleu_2", "Bleu_3", "Bleu_4"]),
        'METEOR': (Meteor(), "METEOR"),
        'ROUGE_L': (Rouge(), "ROUGE_L"),
        'CIDEr': (Cider(), "CIDEr")}
        if metric is None:
            scorers = metric_dict.values()
        else:
            scorers = [metric_dict[m] for m in metric]


        # =================================================
        # Compute scores
        # =================================================
        for scorer, method in scorers:
            # print 'computing %s score...'%(scorer.method())
            score, scores = scorer.compute_score(gts, res)
            if type(method) == list:
                for sc, scs, m in zip(score, scores, method):
                    self.setEval(sc, m)
                    self.setImgToEvalImgs(scs, gts.keys(), m)
                    # print "%s: %0.3f"%(m, sc)
            else:
                self.setEval(score, method)
                self.setImgToEvalImgs(scores, gts.keys(), method)
                # print "%s: %0.3f"%(method, score)
        self.setEvalImgs()

    def setEval(self, score, method):
        self.eval[method] = score

    def setImgToEvalImgs(self, scores, imgIds, method):
        for imgId, score in zip(imgIds, scores):
            if not imgId in self.imgToEval:
                self.imgToEval[imgId] = {}
                self.imgToEval[imgId]["image_id"] = imgId
            self.imgToEval[imgId][method] = score

    def setEvalImgs(self):
        self.evalImgs = [eval for imgId, eval in self.imgToEval.items()]
